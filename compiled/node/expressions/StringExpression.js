// Generated by CoffeeScript 1.8.0
(function() {
  var Expression, LiteralValue, StringValue, parse,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Expression = require("./Expression");

  LiteralValue = require("../values/LiteralValue");

  parse = require("../parser").parse;

  module.exports = StringValue = (function(_super) {
    __extends(StringValue, _super);

    function StringValue(body) {
      this.body = body;
    }

    StringValue.prototype.toValues = function(scope, options) {
      var match, matchEnd, matchStart, output, value;
      output = this.body;
      while (match = /#\{(.*)\}/.exec(output)) {
        value = parse(match[1], {
          startRule: 'valueExpression'
        }).toMGLValue(scope, options);
        matchStart = match.index;
        matchEnd = match.index + match[0].length;
        output = output.substr(0, matchStart) + value.toString() + output.substr(matchEnd);
      }
      return [new LiteralValue(output)];
    };

    return StringValue;

  })(Expression);

}).call(this);
