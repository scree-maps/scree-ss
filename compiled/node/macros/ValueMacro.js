// Generated by CoffeeScript 1.8.0
(function() {
  var Expression, Scope, ValueMacro, assert, literalExpression, _;

  Expression = require('../expressions/Expression');

  literalExpression = require('../expressions/LiteralExpression').literalExpression;

  _ = require("../utilities");

  Scope = require('../scopes/Scope');

  assert = require('assert');

  module.exports = ValueMacro = (function() {
    ValueMacro.createFromValue = function(name, scope, value) {
      return this.createFromExpression(name, null, scope, literalExpression(value));
    };

    ValueMacro.createFromExpression = function(name, argDefinitions, parentScope, expression) {
      return this.createFromExpressions(name, argDefinitions, parentScope, [expression]);
    };

    ValueMacro.createFromExpressions = function(name, argDefinitions, parentScope, expressions) {
      assert(_.isArray(expressions));
      return this.createFromFunction(name, argDefinitions, parentScope, function(args, options) {
        var expression, scope, value, _i, _len, _results;
        scope = new Scope(parentScope);
        for (name in args) {
          value = args[name];
          scope.addValueMacro(name, [], [literalExpression(value)]);
        }
        _results = [];
        for (_i = 0, _len = expressions.length; _i < _len; _i++) {
          expression = expressions[_i];
          _results.push(expression.toValue(scope, options));
        }
        return _results;
      });
    };

    ValueMacro.createFromFunction = function(name, argDefinitions, parentScope, body) {
      assert(_.isFunction(body));
      return new ValueMacro(name, argDefinitions, parentScope, body);
    };

    function ValueMacro(name, argDefinitions, parentScope, body) {
      this.name = name;
      this.argDefinitions = argDefinitions;
      this.parentScope = parentScope;
      this.body = body;
      assert(_.is(this.parentScope, Scope));
      this.argDefinitionsMap = _.objectMap(this.argDefinitions, function(index, argDefinition) {
        return [
          argDefinition.name, _.extend(argDefinition, {
            index: index
          })
        ];
      });
    }

    ValueMacro.prototype.matches = function(name, argValues) {
      return name === this.name && this.matchesArgValues(argValues);
    };

    ValueMacro.prototype.matchesArgValues = function(argValues) {
      var argDefinition, argValue, indicies, positionalIndex, _i, _j, _k, _len, _len1, _len2, _ref;
      if (this.argDefinitions === null) {
        return true;
      }
      indicies = _.times(this.argDefinitions.length, function() {
        return false;
      });
      for (_i = 0, _len = argValues.length; _i < _len; _i++) {
        argValue = argValues[_i];
        if (argValue.name) {
          argDefinition = this.argDefinitionsMap[argValue.name];
          if (!argDefinition) {
            return false;
          }
          indicies[argDefinition.index] = true;
        }
      }
      positionalIndex = -1;
      for (_j = 0, _len1 = argValues.length; _j < _len1; _j++) {
        argValue = argValues[_j];
        if (!argValue.name) {
          while (indicies[++positionalIndex] && positionalIndex < this.argDefinitions.length) {
            null;
          }
          indicies[positionalIndex] = true;
        }
      }
      if (positionalIndex >= this.argDefinitions.length) {
        return false;
      }
      _ref = this.argDefinitions;
      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
        argDefinition = _ref[_k];
        if (argDefinition.expression) {
          indicies[argDefinition.index] = !!argDefinition.expression;
        }
      }
      return _.all(indicies);
    };

    ValueMacro.prototype.toValues = function(argValues, options) {
      var args, values;
      args = this.processArgs(argValues, options);
      values = this.body(args, options);
      assert(_.isArray(values));
      return values;
    };

    ValueMacro.prototype.processArgs = function(argValues, options) {
      var argDefinition, argValue, args, positionalIndex, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3;
      args = {};
      if (!this.argDefinitions) {
        positionalIndex = 0;
        for (_i = 0, _len = argValues.length; _i < _len; _i++) {
          argValue = argValues[_i];
          _ref = argValue.values;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            value = _ref[_j];
            args[argValue.name || positionalIndex++] = value;
          }
        }
      } else {
        assert(this.matchesArgValues(argValues));
        args = {};
        for (_k = 0, _len2 = argValues.length; _k < _len2; _k++) {
          argValue = argValues[_k];
          if (argValue.name) {
            argDefinition = _.find(this.argDefinitions, function(argDefinition) {
              return argDefinition.name === argValue.name;
            });
            assert.equal(argValue.values.length, 1);
            args[argDefinition.name] = argValue.values[0];
          }
        }
        positionalIndex = -1;
        for (_l = 0, _len3 = argValues.length; _l < _len3; _l++) {
          argValue = argValues[_l];
          if (!argValue.name) {
            _ref1 = argValue.values;
            for (_m = 0, _len4 = _ref1.length; _m < _len4; _m++) {
              value = _ref1[_m];
              while (args[(_ref2 = this.argDefinitions[++positionalIndex]) != null ? _ref2.name : void 0] && positionalIndex < this.argDefinitions.length) {
                null;
              }
              argDefinition = this.argDefinitions[positionalIndex];
              assert(argDefinition);
              args[argDefinition.name] = value;
            }
          }
        }
        _ref3 = this.argDefinitions;
        for (_n = 0, _len5 = _ref3.length; _n < _len5; _n++) {
          argDefinition = _ref3[_n];
          if (!args[argDefinition.name]) {
            assert(argDefinition.expression, "No default value for argument '" + argDefinition.name + "'");
            args[argDefinition.name] = argDefinition.expression.toValue(this.parentScope, options);
          }
        }
      }
      return args;
    };

    return ValueMacro;

  })();

}).call(this);
