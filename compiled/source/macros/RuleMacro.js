// Generated by CoffeeScript 1.8.0
(function() {
  var RuleMacro, Scope, assert, literalExpression, _;

  literalExpression = require("../expressions/LiteralExpression").literalExpression;

  Scope = require('../scopes/Scope');

  _ = require("../utilities");

  assert = require("assert");

  module.exports = RuleMacro = (function() {
    RuleMacro.createFromFunction = function(name, argDefinitions, parentScope, body) {
      return new RuleMacro(parentScope, name, argDefinitions, body);
    };

    function RuleMacro(parentScope, name, argDefinitions, body) {
      var ClassScope;
      this.parentScope = parentScope;
      this.name = name;
      this.argDefinitions = argDefinitions;
      this.body = body != null ? body : null;
      ClassScope = require("../scopes/ClassScope");
      this.scope = new ClassScope(this.parentScope);
      if (this.argDefinitions) {
        this.argLengthMin = _.count(this.argDefinitions, function(argDefinition) {
          return !argDefinition.expression;
        });
        this.argLengthMax = this.argDefinitions.length;
      }
    }

    RuleMacro.prototype.evaluateScope = function(argValues, stack) {
      var args, name, scope, value, _ref;
      args = this.processArgs(argValues, this.parentScope, stack);
      scope = new Scope(this.scope);
      for (name in args) {
        value = args[name];
        scope.addValueMacro(name, [], [literalExpression(value)]);
      }
      return _.extend(scope.evaluateRules(stack, this.scope.rules), (_ref = this.body) != null ? _ref.call({}, argValues, stack) : void 0);
    };

    RuleMacro.prototype.matches = function(name, argValues) {
      return name === this.name && this.matchesArgValues(argValues);
    };

    RuleMacro.prototype.matchesArgValues = function(argValues) {
      if (this.argDefinitions === null) {
        return true;
      } else {
        return argValues.length <= this.argLengthMax && argValues.length >= this.argLengthMin;
      }
    };

    RuleMacro.prototype.processArgs = function(argValues, scope, stack) {
      var argDefinition, argValue, args, positionaIndex, positionalIndex, _i, _j, _len, _len1;
      assert(this.matchesArgValues(argValues));
      args = {};
      if (!this.argDefinitions) {
        positionalIndex = 0;
        for (_i = 0, _len = argValues.length; _i < _len; _i++) {
          argValue = argValues[_i];
          args[positionalIndex++] = argValue;
        }
      } else {
        positionaIndex = 0;
        for (_j = 0, _len1 = argValues.length; _j < _len1; _j++) {
          argValue = argValues[_j];
          argDefinition = this.argDefinitions[positionaIndex++];
          args[argDefinition.name] = argValue;
        }
        while (positionaIndex < this.argDefinitions.length) {
          argDefinition = this.argDefinitions[positionaIndex++];
          args[argDefinition.name] = argDefinition.expression.toValue(scope, stack);
        }
      }
      return args;
    };

    return RuleMacro;

  })();

}).call(this);

//# sourceMappingURL=RuleMacro.js.map
