{
  require 'coffee-script'
  _ = require './utilities'

  @GlobalScope = require('./scopes/GlobalScope')

  @ColorValue = require('./values/ColorValue')
  @AttributeReferenceValue = require('./values/AttributeReferenceValue')
  @LiteralValue = require("./values/LiteralValue")
  @StringValue = require("./values/StringValue")

  @LiteralExpression = require('./expressions/LiteralExpression')
  @ValueMacroReferenceExpression = require('./expressions/ValueMacroReferenceExpression')
  @ComparisonExpression = require('./expressions/ComparisonExpression')
  @TypeCheckExpression = require('./expressions/TypeCheckExpression')
  @BooleanExpression = require('./expressions/BooleanExpression')

  @globalScope = @scope = new @GlobalScope()
  @stack = []

  {@literalExpression} = @LiteralExpression
  {@literalValue} = @LiteralValue

  @pushScope = (scope) ->
    @stack.push(@scope)
    @scope = scope

  @popScope = ->
    @scope = @stack.pop()
}

global = statements { @globalScope.toMGLGlobalScope() }

identifier = a:[a-z]b:[a-z0-9-]* { a + b.join("") }

whitespace =  (("\n" / "\r" / "\t" / " ")* / !.) { null }
statementSeperator = ("\n" / "\r" / ";" / !.) whitespace { null }
argumentSeperator = (("\n" / "\r" / "\t" / " ")+ / !.) { null }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                  Scopes                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

layerScope =
  ("#" name:identifier { @pushScope(@scope.addLayerScope(name)) }) scope

classScope =
  ("." name:identifier { @pushScope(@scope.addClassScope(name)) }) scope

sourceScope =
  ("&" name:identifier { @pushScope(@scope.addSourceScope(name)) }) scope

ruleMacroDefinition =
  (name:identifier args:ruleMacroDefinitionArguments whitespace "=" whitespace { @pushScope(@scope.addRuleMacro(name, args)) }) scope

ruleMacroDefinitionArguments =
  "(" head:identifier tail:(argumentSeperator identifier)* ")" { [head].concat(tail.map (e) -> e[1] ) } /
  "" { return [] }

scope =
  (whitespace "{" whitespace body:statements whitespace "}" whitespace { @popScope() })

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                 Statements                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

statements = whitespace (statement whitespace)*

statement =
  sourceRule /
  filterRule /
  valueMacroDefinition /
  rule /
  metaRule /
  layerScope /
  classScope /
  ruleMacroDefinition /
  sourceScope

sourceRule =
  "$source:" whitespace "&" source:identifier statementSeperator { @scope.setSource(source) }

filterRule =
 "$filter:" whitespace expression:filterExpression statementSeperator { @scope.setFilter(expression) }

metaRule =
  "$" name:identifier ":" whitespace expressions:valueExpressions statementSeperator { @scope.addMetaRule(name, expressions) }

rule =
  name:identifier ":" whitespace expressions:valueExpressions statementSeperator { @scope.addRule(name, expressions) }

valueMacroDefinition =
  name:identifier args:valueMacroDefinitionArguments whitespace "=" whitespace body:valueExpression statementSeperator { @scope.addValueMacro(name, args, body) }

valueMacroDefinitionArguments =
  "(" head:identifier tail:(whitespace identifier)* ")" { [head].concat(tail.map (e) -> e[1] ) } /
  "" { return [] }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                 Expression                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

expression = filterExpression / valueExpression

/////////////////////////////////////////////
//           Filter Expression             //
/////////////////////////////////////////////

filterExpression =
  booleanFilterExpression /
  leafFilterExpression

booleanFilterExpression =
  whitespace left:leafFilterExpression whitespace operator:("||" / "&&") whitespace right:filterExpression { new @BooleanExpression(operator, [left, right]) }

// Leaf Filter Expressions

leafFilterExpression =
  groupFilterExpression /
  comparisonFilterExpression /
  typeCheckFilterExpression

groupFilterExpression =
  whitespace "(" expression:filterExpression ")" { return expression }

typeCheckFilterExpression =
  whitespace "is" whitespace type:valueExpression { new @TypeCheckExpression(type) } /

comparisonFilterExpression =
  whitespace left:valueExpression whitespace operator:("==" / ">=" / "<=" / "<" / ">" / "!=") whitespace right:valueExpression { new @ComparisonExpression(left, operator, right) }

/////////////////////////////////////////////
//           Value Expression              //
/////////////////////////////////////////////

valueExpressions =
  head:valueExpression tail:(argumentSeperator valueExpression)* { [head].concat(tail.map (e) -> e[1]) }

valueExpression =
  valueMacroReferenceValueExpression /
  literalValueExpression

valueMacroReferenceValueExpression =
  name:identifier args:valueMacroReferenceValueExpressionArguments { new @ValueMacroReferenceExpression(name, args) }

valueMacroReferenceValueExpressionArguments =
  "(" head:valueExpression tail:(argumentSeperator valueExpression)* ")" { [head].concat(tail.map (e) -> e[1] ) } /
  "" { [] }

literalValueExpression =
  value:value { @literalExpression value }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                  Value                                     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

value =
  booleanValue /
  numberValue /
  attributeReferenceValue /
  colorValue /
  stringValue

stringValue =
  whitespace "\"" body:[^\"]* "\"" { new @StringValue(body.join("")) }

booleanValue =
  whitespace "true" { @literalValue true } /
  whitespace "false" { @literalValue false }

numberValue =
  whitespace before:numberValueInteger? "." after:([0-9]+) { @literalValue (before + parseFloat("." + after.join(""))) } /
  whitespace number:numberValueInteger { @literalValue number }

numberValueInteger =
  head:[1-9] tail:[0-9]* { parseInt(head + tail.join("")) } /
  "0" { 0 }

attributeReferenceValue =
  whitespace "@" name:identifier { new @AttributeReferenceValue(name) }

colorValue =
  whitespace "#" color:[0-9a-f]+ { @ColorValue.hex(color.join("")) }
