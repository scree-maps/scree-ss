// Generated by CoffeeScript 1.8.0
(function() {
  var GlobalScope, Globals, LayerScope, RuleMacro, Scope, ValueMacro, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Scope = require("./Scope");

  _ = require("../utilities");

  LayerScope = require('./LayerScope');

  Globals = require('../globals');

  ValueMacro = require('../macros/ValueMacro');

  RuleMacro = require('../macros/RuleMacro');

  module.exports = GlobalScope = (function(_super) {
    __extends(GlobalScope, _super);

    function GlobalScope() {
      GlobalScope.__super__.constructor.call(this);
      this.layerScopes = {};
      this.sources = {};
    }

    GlobalScope.prototype.addSource = function(name, source) {
      return this.sources[name] = source;
    };

    GlobalScope.prototype.getValueMacro = function(name, argValues) {
      var fn, macro;
      if (macro = GlobalScope.__super__.getValueMacro.apply(this, arguments)) {
        return macro;
      } else if (fn = Globals.valueMacros[name]) {
        return ValueMacro.createFromFunction(name, null, this, fn);
      } else {
        return null;
      }
    };

    GlobalScope.prototype.getRuleMacro = function(name, argValues) {
      return GlobalScope.__super__.getRuleMacro.apply(this, arguments);
    };

    GlobalScope.prototype.getGlobalScope = function() {
      return this;
    };

    GlobalScope.prototype.addLayerScope = function(name, scope) {
      if (this.layerScopes[name]) {
        throw new Error("Duplicate entries for layer scope '" + name + "'");
      }
      return this.layerScopes[name] = new LayerScope(this);
    };

    GlobalScope.prototype.toMGLGlobalScope = function(options) {
      var layers, rules, sources, transition;
      options = _.extend({
        scope: "global",
        globalScope: this
      }, options);
      layers = _.objectMapValues(this.layerScopes, function(name, layer) {
        return layer.toMGLLayerScope(options);
      });
      rules = this.toMGLRules(options, this.rules);
      sources = _.objectMapValues(this.sources, function(name, source) {
        return _.objectMapValues(source, function(key, value) {
          return value.toMGLValue(options);
        });
      });
      transition = {
        duration: rules["transition-delay"],
        delay: rules["transition-duration"]
      };
      delete rules["transition-delay"];
      delete rules["transition-duration"];
      return _.extend(rules, {
        version: 6,
        layers: layers,
        sources: sources,
        transition: transition
      });
    };

    return GlobalScope;

  })(Scope);

}).call(this);
