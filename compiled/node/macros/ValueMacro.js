// Generated by CoffeeScript 1.8.0
(function() {
  var Expression, MacroArgumentDefinition, Scope, ValueMacro, assert, literalExpression, _;

  Expression = require('../expressions/Expression');

  MacroArgumentDefinition = require('../macros/MacroArgumentDefinition');

  _ = require("../utilities");

  Scope = require('../scopes/Scope');

  assert = require('assert');

  literalExpression = require('../expressions/LiteralExpression').literalExpression;

  module.exports = ValueMacro = (function() {
    ValueMacro.createFromValue = function(name, scope, value) {
      return this.createFromExpression(name, MacroArgumentDefinition.ZERO, scope, literalExpression(value));
    };

    ValueMacro.createFromExpression = function(name, argDefinition, parentScope, expression) {
      return this.createFromExpressions(name, argDefinition, parentScope, [expression]);
    };

    ValueMacro.createFromExpressions = function(name, argDefinition, parentScope, expressions) {
      assert(_.isArray(expressions));
      return this.createFromFunction(name, argDefinition, parentScope, function(args, options) {
        var expression, scope, values;
        scope = new Scope(parentScope);
        scope.addLiteralValueMacros(args);
        options.scopeStack.push(scope);
        values = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = expressions.length; _i < _len; _i++) {
            expression = expressions[_i];
            _results.push(expression.toValue(scope, options));
          }
          return _results;
        })();
        options.scopeStack.pop();
        return values;
      });
    };

    ValueMacro.createFromFunction = function(name, argDefinition, parentScope, body) {
      assert(_.isFunction(body));
      return new ValueMacro(name, argDefinition, parentScope, body);
    };

    function ValueMacro(name, argDefinition, parentScope, body) {
      this.name = name;
      this.argDefinition = argDefinition;
      this.parentScope = parentScope;
      this.body = body;
      assert(_.is(this.parentScope, Scope));
      assert(_.is(this.argDefinition, MacroArgumentDefinition) || !this.argDefinition);
      assert(_.isFunction(this.body));
    }

    ValueMacro.prototype.matches = function(name, argValues) {
      return name === this.name && argValues.matches(this.argDefinition);
    };

    ValueMacro.prototype.toValues = function(argValues, options) {
      var args, values;
      args = argValues.toArguments(this.argDefinition, options);
      values = this.body(args, options);
      assert(_.isArray(values));
      return values;
    };

    return ValueMacro;

  })();

}).call(this);
