// Generated by CoffeeScript 1.8.0
(function() {
  var MacroArgValues, Options, PropertyMacro, Scope, assert, literalExpression, _;

  literalExpression = require("../expressions/LiteralExpression").literalExpression;

  Scope = require('../scopes/Scope');

  _ = require("../utilities");

  assert = require("assert");

  MacroArgValues = require("./MacroArgValues");

  Options = require("../Options");

  module.exports = PropertyMacro = (function() {
    function PropertyMacro(parentScope, name, argDefinition, body) {
      var ClassScope;
      this.parentScope = parentScope;
      this.name = name;
      this.argDefinition = argDefinition;
      this.body = body != null ? body : null;
      ClassScope = require("../scopes/ClassScope");
      this.scope = new ClassScope(this.parentScope);
      this.argLengthMin = _.count(this.argDefinition.definitions, function(argDefinition) {
        return !argDefinition.expression;
      });
      this.argLengthMax = this.argDefinition.length;
    }

    PropertyMacro.prototype.toMGLScope = function(argValues, options) {
      var args, scope, values, _ref;
      assert(_.is(argValues, MacroArgValues));
      assert(_.is(options, Options));
      args = argValues.toArguments(this.argDefinition, options);
      scope = new Scope(this.scope);
      scope.addLiteralValueMacros(args);
      options.scopeStack.push(scope);
      values = _.extend(scope.toMGLProperties(options, this.scope.properties), (_ref = this.body) != null ? _ref.apply({}, argValues) : void 0);
      options.scopeStack.pop();
      return values;
    };

    PropertyMacro.prototype.matches = function(name, argValues) {
      return name === this.name && argValues.matches(this.argDefinition);
    };

    return PropertyMacro;

  })();

}).call(this);
