{
  _ = require './utilities'

  @GlobalScope = require('./scopes/GlobalScope')

  @ColorValue = require('./values/ColorValue')
  @AttributeReferenceValue = require('./values/AttributeReferenceValue')

  @LiteralExpression = require('./expressions/LiteralExpression')
  @ValueMacroReferenceExpression = require('./expressions/ValueMacroReferenceExpression')

  @globalScope = @scope = new @GlobalScope()
  @stack = []

  {@literal} = @LiteralExpression

  @pushScope = (scope) ->
    @stack.push(@scope)
    @scope = scope

  @popScope = ->
    @scope = @stack.pop()
}

global = statements { @globalScope.toMGLGlobalScope() }

identifier = a:[a-z]b:[a-z0-9-]* { a + b.join("") }

whitespace =  (("\n" / "\r" / "\t" / " ")* / !.) { null }
statementSeperator = ("\n" / "\r" / ";" / !.) whitespace { null }
argumentSeperator = (("\n" / "\r" / "\t" / " ")+ / !.) { null }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                            Scopes and Statements                           //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

statements = whitespace (statement whitespace)*

statement =
  valueMacroDefinition /
  rule /
  metaRule /
  layerScope /
  classScope /
  ruleMacroDefinition

layerScope = ("#" name:identifier { @pushScope(@scope.addLayerScope(name)) }) scope
classScope = ("." name:identifier { @pushScope(@scope.addClassScope(name)) }) scope
scope = (whitespace "{" whitespace body:statements whitespace "}" whitespace { @popScope() })

filterRule =
  "$filter" whitespace ":" whitespace expressions: statementSeperator { @scope.setFilter(name, expressions) }

metaRule =
  "$" name:identifier whitespace ":" whitespace expressions:expressions statementSeperator { @scope.addMetaRule(name, expressions) }

rule =
  name:identifier whitespace ":" whitespace expressions:expressions statementSeperator { @scope.addRule(name, expressions) }

valueMacroDefinition =
  name:identifier args:valueMacroDefinitionArguments whitespace "=" whitespace body:expression statementSeperator
  { @scope.addValueMacro(name, args, body) }

valueMacroDefinitionArguments =
  "(" head:identifier tail:(whitespace identifier)* ")" { [head].concat(tail.map (e) -> e[1] ) } /
  "" { return [] }

ruleMacroDefinition =
  (name:identifier args:ruleMacroDefinitionArguments whitespace "=" whitespace { @pushScope(@scope.addRuleMacro(name, args)) }) scope

ruleMacroDefinitionArguments =
  "(" head:identifier tail:(argumentSeperator identifier)* ")" { [head].concat(tail.map (e) -> e[1] ) } /
  "" { return [] }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                             Value Expression                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

expressions =
  head:expression tail:(" "+ expression)* { [head].concat(tail.map (e) -> e[1]) }

expression =
  numberExpression /
  booleanExpression /
  valueMacroReferenceExpression /
  attributeReferenceExpression /
  colorExpression

booleanExpression =
  "true" { @literal true } / "false" { @literal false }

numberExpression =
  before:integerExpression? "." after:([0-9]+) { @literal before + parseFloat("." + after.join("")) } /
  integerExpression

integerExpression =
  head:[1-9] tail:[0-9]* { @literal parseInt(head + tail.join("")) } /
  "0" { @literal 0 }

valueMacroReferenceExpression =
  name:identifier args:valueMacroReferenceExpressionArguments { new @ValueMacroReferenceExpression(name, args) }

valueMacroReferenceExpressionArguments =
  "(" head:expression tail:(argumentSeperator expression)* ")" { [head].concat(tail.map (e) -> e[1] ) } /
  "" { [] }

attributeReferenceExpression =
  "@" name:identifier { @literal new @AttributeReferenceValue(name) }

colorExpression =
  "#" color:[0-9a-f]+ { @literal @ColorValue.hex(color.join("")) }
