// Generated by CoffeeScript 1.8.0
(function() {
  var RuleMacro, Scope, assert, literalExpression, _;

  literalExpression = require("../expressions/LiteralExpression").literalExpression;

  Scope = require('../scopes/Scope');

  _ = require("../utilities");

  assert = require("assert");

  module.exports = RuleMacro = (function() {
    function RuleMacro(parentScope, name, argDefinitions, body) {
      var ClassScope;
      this.parentScope = parentScope;
      this.name = name;
      this.argDefinitions = argDefinitions;
      this.body = body != null ? body : null;
      ClassScope = require("../scopes/ClassScope");
      this.scope = new ClassScope(this.parentScope);
      this.argLengthMin = _.count(this.argDefinitions, function(argDefinition) {
        return !argDefinition.expression;
      });
      this.argLengthMax = this.argDefinitions.length;
    }

    RuleMacro.prototype.toMGLScope = function(argValues, options) {
      var args, name, scope, value, _ref;
      args = this.processArgs(argValues, this.parentScope, options);
      scope = new Scope(this.scope);
      for (name in args) {
        value = args[name];
        scope.addValueMacro(name, [], [literalExpression(value)]);
      }
      return _.extend(scope.toMGLRules(options, this.scope.rules), (_ref = this.body) != null ? _ref.apply({}, argValues) : void 0);
    };

    RuleMacro.prototype.matches = function(name, argValues) {
      return name === this.name && this.matchesArgValues(argValues);
    };

    RuleMacro.prototype.matchesArgValues = function(argValues) {
      return argValues.length <= this.argLengthMax && argValues.length >= this.argLengthMin;
    };

    RuleMacro.prototype.processArgs = function(argValues, scope, options) {
      var argDefinition, argValue, args, positionaIndex, _i, _len;
      assert(this.matchesArgValues(argValues));
      args = {};
      positionaIndex = 0;
      for (_i = 0, _len = argValues.length; _i < _len; _i++) {
        argValue = argValues[_i];
        argDefinition = this.argDefinitions[positionaIndex++];
        args[argDefinition.name] = argValue;
      }
      while (positionaIndex < this.argDefinitions.length) {
        argDefinition = this.argDefinitions[positionaIndex++];
        args[argDefinition.name] = argDefinition.expression.toValue(scope, options);
      }
      return args;
    };

    return RuleMacro;

  })();

}).call(this);
