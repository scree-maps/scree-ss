{
  require 'coffee-script'
  @_ = require './utilities'
  assert = require 'assert'

  @Stylesheet = require('./Stylesheet')
  @Scope = require('./Scope')
  @Stack = require('./Stack')

  @ColorValue = require('./values/ColorValue')
  @AttributeReferenceValue = require('./values/AttributeReferenceValue')
  @FunctionValue = require("./values/FunctionValue")

  @ValueSetDefinition = require("./ValueSetDefinition")

  @LiteralExpression = require('./expressions/LiteralExpression')
  @StringExpression = require("./expressions/StringExpression")
  @ValueMacroReferenceExpression = require('./expressions/ValueMacroReferenceExpression')
  @ComparisonOperatorExpression = require('./expressions/ComparisonOperatorExpression')
  @TypeCheckOperatorExpression = require('./expressions/TypeCheckOperatorExpression')
  @BooleanLogicExpression = require('./expressions/BooleanLogicExpression')
  @SetOperatorExpression = require('./expressions/SetOperatorExpression')
  @NotOperatorExpression = require('./expressions/NotOperatorExpression')
  @ArrayExpression = require('./expressions/ArrayExpression')
  @MapExpression = require('./expressions/MapExpression')
  @DotExpression = require('./expressions/DotExpression')
  @SubscriptExpression = require('./expressions/SubscriptExpression')
  @ArithmeticOperatorExpression = require('./expressions/ArithmeticOperatorExpression')
  @NullCoalescingExpression = require('./expressions/NullCoalescingExpression')
  @TernaryExpression = require('./expressions/TernaryExpression')

  @stylesheet = new @Stylesheet()
  @globalScope = @scope = @stylesheet.scope

  @pushScope = (scope) =>
    assert(scope instanceof @Scope, "Malformed arguments to pushScope")
    assert(scope.parent == @scope, "Next scope must be child of current scope")
    @scope = scope

  @popScope = =>
    @scope = @scope.parent

  @rehead = (head, tail) => [head].concat(@_.pluck(tail, 1))
}

global = statements { @stack = new @Stack(); @stylesheet.scope.evaluate(@Scope.Type.GLOBAL, @stack) }

identifier = a:[A-Za-z]b:[a-zA-Z0-9-_]* { a + b.join("") }

comment = "//" [^\n\r]* { null }

whitespaceWeak = " " / "\t" { null }
whitespaceStrong = comment? "\n" / "\r" { null }
whitespace = whitespaceStrong / whitespaceWeak { null }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                              Expression Sets                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

expressionSetSeperatorWeak = ((whitespaceWeak* "," whitespaceWeak*) / (whitespaceWeak)+) { null }
expressionSetSeperatorStrong = ((whitespace* "," whitespace*) / whitespace+) { null }

// TODO simplify heirarchy
// TODO standardize inclusion of / lack of parens
// TODO create standard ExpressionSet class

expressionSetUnnamedWeak =
  head:expression tail:(expressionSetSeperatorWeak expression)* { @rehead(head, tail) } /
  "(" whitespace* expressions:expressionSetUnnamedStrong whitespace* ")" { expressions }

expressionSetUnnamedStrong =
  head:expression tail:(expressionSetSeperatorStrong expression)* { @rehead(head, tail) }

expressionSetMixedStrong =
  head:expressionSetMixedStrongItem tail:(expressionSetSeperatorStrong expressionSetMixedStrongItem)* { @rehead(head, tail) } /

expressionSetMixedStrongItem =
  name:(identifier / integer) whitespace* ":" whitespace* expression:expression { name: name, expression: expression } /
  expression:expression { { expression: expression } }

expressionSetDefinition =
  "(" whitespace* head:expressionSetDefinitionItem tail:(expressionSetSeperatorStrong expressionSetDefinitionItem)* whitespace* ")" { new @ValueSetDefinition(@rehead(head, tail), @scope) } /
  "" { @ValueSetDefinition.ZERO }

expressionSetDefinitionItem =
  name:identifier whitespace* "=" whitespace* expression:expression { name: name, expression: expression } /
  name:identifier { name: name }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                 Statements                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

statementSeperator = whitespaceWeak* (";" / whitespaceStrong) whitespace* { null }

statements = whitespace* (statement (statementSeperator statement)* statementSeperator? whitespace*)? comment? whitespace*

statement =
  comment /
  valueMacroDefinition /
  layer /
  class /
  propertyMacroDefinition /
  loop /
  conditional /
  property

property =
  name:identifier ":" whitespace* expressions:expressionSetUnnamedWeak { @scope.addProperty(name, expressions) } /
  name:identifier whitespace* "(" whitespace* expressions:expressionSetMixedStrong whitespace* ")" { @scope.addProperty(name, expressions) } /
  name:identifier { @scope.addProperty(name, []) }

valueMacroDefinition =
  name:identifier whitespace* args:expressionSetDefinition whitespace* "=" whitespace* expressions:expressionSetUnnamedWeak { @scope.addValueMacro(name, args, expressions) }

loop =
  ("for" whitespace+ keyIdentifier:identifier expressionSetSeperatorStrong valueIdentifier:identifier whitespace+ "in" whitespace+ collection:expression whitespace* { @pushScope(@scope.addLoop(valueIdentifier, keyIdentifier, collection)) }) scope /
  ("for" whitespace+ valueIdentifier:identifier whitespace+ "in" whitespace+ collection:expression whitespace* { @pushScope(@scope.addLoop(valueIdentifier, null, collection)) }) scope

conditional =
  ("if" whitespace+ expression:expression whitespace* { @pushScope(@scope.addIf(expression)) }) scope
  ((whitespace* "else if" whitespace+ expression:expression whitespace* { @pushScope(@scope.addElseIf(expression)) }) scope)*
  ((whitespace* ("else") whitespace* {@pushScope(@scope.addElse())}) scope)?


layer =
  ("#" name:identifier? { @pushScope(@scope.addLayer(name)) }) scope

class =
  ("." name:identifier { @pushScope(@scope.addClass(name)) }) scope

propertyMacroDefinition =
  (name:identifier args:expressionSetDefinition whitespace* "=" whitespace* { @pushScope(@scope.addPropertyMacro(name, args)) }) scope

scope =
  (whitespace* "{" body:statements "}" { @popScope() })

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                 Expression                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

expression =
  filterExpression /
  arithmeticExpression

/////////////////////////////////////////////
//           Filter Expression             //
/////////////////////////////////////////////

filterExpression =
  notOperatorExpression /
  booleanLogicExpression /
  filterStrongExpression

booleanLogicExpression =
  left:filterStrongExpression whitespace* operator:("||" / "&&") whitespace* right:expression { new @BooleanLogicExpression(operator, [left, right]) }

notOperatorExpression =
  "!" whitespace* expression:expression { new @NotOperatorExpression(expression) }

/////////////////////////////////////////////
//         Filter Weak Expression          //
/////////////////////////////////////////////

filterStrongExpression =
  groupExpression /
  setOperatorExpression /
  comparisonOperatorExpression /
  typeCheckOperatorExpression

groupExpression =
  whitespace* "(" expression:expression ")" { expression }

typeCheckOperatorExpression =
  whitespace* "is" whitespace* type:arithmeticExpression { new @TypeCheckOperatorExpression(type) }

comparisonOperatorExpression =
  whitespace* left:arithmeticExpression whitespace* operator:("==" / ">=" / "<=" / "<" / ">" / "!=") whitespace* right:arithmeticExpression { new @ComparisonOperatorExpression(left, operator, right) }

setOperatorExpression =
  whitespace* left:arithmeticExpression whitespace* operator:("in" / "!in") whitespace* right:arithmeticExpression { new @SetOperatorExpression(left, operator, right) }

/////////////////////////////////////////////
//     Arithmetic Operator Expression      //
/////////////////////////////////////////////

arithmeticExpression =
  left:arithmeticStrongExpression whitespaceWeak* operator:("+" / "-") whitespaceWeak* right:arithmeticExpression { new @ArithmeticOperatorExpression(left, operator, right) } /
  arithmeticStrongExpression

arithmeticStrongExpression =
  left:valueExpression whitespaceWeak* operator:("/" / "*") whitespaceWeak* right:arithmeticStrongExpression { new @ArithmeticOperatorExpression(left, operator, right) } /
  "(" whitespace* expression:arithmeticExpression whitespace* ")" { expression } /
  conditionalExpression

/////////////////////////////////////////////
//            Conditional Expression       //
/////////////////////////////////////////////

conditionalExpression =
  head:valueExpression whitespaceWeak* '??' whitespaceWeak* tail:conditionalExpression { new @NullCoalescingExpression(head, tail) } /
  condition:valueExpression whitespaceWeak* '?' whitespaceWeak* trueExpression:conditionalExpression whitespaceWeak* ':' whitespaceWeak* falseExpression:conditionalExpression { new @TernaryExpression(condition, trueExpression, falseExpression) } /
  valueExpression

/////////////////////////////////////////////
//            Value Expression             //
/////////////////////////////////////////////

valueExpression =
  head:valueWeakExpression accesses:(
    "." (integer / identifier) /
    "[" expression "]"
  )* {
    output = head

    for access in accesses
      if access[0] == "."
        output = new @DotExpression(output, access[1])
      else if access[0] == "["
        output = new @SubscriptExpression(output, access[1])

    return output
  }

/////////////////////////////////////////////
//           Weak Value Expression         //
/////////////////////////////////////////////

valueWeakExpression =
  literalExpression /
  valueMacroReferenceExpression /
  stringExpression /
  mapExpression /
  arrayExpression

literalExpression =
  value:value { new @LiteralExpression(value) }

valueMacroReferenceExpression =
  name:identifier whitespace* "(" whitespace* expressions:expressionSetMixedStrong whitespace* ")" { new @ValueMacroReferenceExpression(name, expressions) } /
  name:identifier { new @ValueMacroReferenceExpression(name, []) }

stringExpression =
  "\"" body:[^\"]* "\"" { new @StringExpression(body.join("")) } /
  "'" body:[^\']* "'" { new @StringExpression(body.join("")) }

// Use standard expressionSet rules
arrayExpression =
  "[" whitespace* expressions:expressionSetUnnamedStrong whitespace* "]" { new @ArrayExpression(expressions) }

mapExpression =
  "[" whitespace* expressions:mapExpressionItems whitespace* "]" { new @MapExpression(expressions) }

// Use standard expressionSet rules
mapExpressionItems =
  head:mapExpressionItem tail:(expressionSetSeperatorStrong mapExpressionItem)* { @rehead(head, tail) }

mapExpressionItem =
  name:(identifier / integer) whitespace* ":" whitespace* expression:expression { name: name, expression: expression; name: name, expression: expression }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                  Value                                     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

value =
  null /
  boolean /
  number /
  attributeReferenceValue /
  colorValue

boolean =
  "true" { true } /
  "false" { false }

null =
  "null" { null }

number =
  before:integer? "." after:([0-9]+) { (before + parseFloat("." + after.join(""))) } /
  number:integer { number }

integer =
  head:[1-9-] tail:[0-9]* { parseInt(head + tail.join("")) } /
  "0" { 0 }

attributeReferenceValue =
  "@" name:identifier { new @AttributeReferenceValue(name) }

colorValue =
  "#" color:[0-9a-fA-F]+ { @ColorValue.hex(color.join("")) }

