// Generated by CoffeeScript 1.8.0
(function() {
  var ClassScope, LayerScope, Scope, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Scope = require("./Scope");

  ClassScope = require('./ClassScope');

  _ = require('../utilities');

  module.exports = LayerScope = (function(_super) {
    __extends(LayerScope, _super);

    LayerScope.prototype.selector = null;

    LayerScope.prototype.addMetaProperty = function(name, expressions) {
      if (this.metaProperties[name]) {
        throw new Error("Duplicate entries for metaproperty '" + name + "'");
      }
      return this.metaProperties[name] = expressions;
    };

    LayerScope.prototype.addClassScope = function(name) {
      var _base;
      return (_base = this.classScopes)[name] || (_base[name] = new ClassScope(this));
    };

    LayerScope.prototype.setFilter = function(filterExpression) {
      if (this.filterExpression) {
        throw new Error("Duplicate filters");
      }
      return this.filterExpression = filterExpression;
    };

    LayerScope.prototype.setSource = function(source) {
      if (this.source) {
        throw new Error("Duplicate sources");
      }
      return this.source = source;
    };

    function LayerScope(name, parent) {
      this.name = name;
      LayerScope.__super__.constructor.call(this, parent);
      this.classScopes = {};
      this.metaProperties = {};
    }

    LayerScope.prototype.toMGLLayerScope = function(options) {
      var metaFilterProperty, metaProperties, metaSourceProperty, paintClassProperties, paintProperties, _ref;
      options.scopeStack.push(this);
      if (this.filterExpression) {
        options.pushFilter();
        options.meta = true;
        options.property = "filter";
        metaFilterProperty = {
          filter: (_ref = this.filterExpression) != null ? _ref.toMGLFilter(this, options) : void 0
        };
        options.popFilter();
        options.meta = false;
        options.property = null;
      } else {
        metaFilterProperty = null;
      }
      if (this.source) {
        if (!this.getSourceScope(this.source)) {
          throw "Unknown source '" + this.source + "'";
        }
        metaSourceProperty = {
          source: this.source
        };
      } else {
        metaSourceProperty = null;
      }
      options.meta = true;
      metaProperties = this.toMGLProperties(options, this.metaProperties);
      options.meta = false;
      paintProperties = {
        paint: this.toMGLProperties(options, this.properties)
      };
      paintClassProperties = _.objectMap(this.classScopes, (function(_this) {
        return function(scope, name) {
          return ["paint." + name, scope.toMGLClassScope(options)];
        };
      })(this));
      options.scopeStack.pop();
      return _.extend({
        id: this.name
      }, metaProperties, paintProperties, paintClassProperties, metaFilterProperty, metaSourceProperty);
    };

    return LayerScope;

  })(Scope);

}).call(this);

//# sourceMappingURL=LayerScope.js.map
