{
  require 'coffee-script'
  @_ = require './utilities'

  @GlobalScope = require('./scopes/GlobalScope')

  @ColorValue = require('./values/ColorValue')
  @AttributeReferenceValue = require('./values/AttributeReferenceValue')
  @FunctionValue = require("./values/FunctionValue")

  @MacroArgDefinition = require("./macros/MacroArgDefinition")

  @LiteralExpression = require('./expressions/LiteralExpression')
  @StringExpression = require("./expressions/StringExpression")
  @ValueMacroReferenceExpression = require('./expressions/ValueMacroReferenceExpression')
  @ComparisonOperatorExpression = require('./expressions/ComparisonOperatorExpression')
  @TypeCheckOperatorExpression = require('./expressions/TypeCheckOperatorExpression')
  @BooleanLogicExpression = require('./expressions/BooleanLogicExpression')
  @SetOperatorExpression = require('./expressions/SetOperatorExpression')
  @NotOperatorExpression = require('./expressions/NotOperatorExpression')
  @ArrayExpression = require('./expressions/ArrayExpression')

  @globalScope = @scope = new @GlobalScope()
  @stack = []

  {@literalExpression} = @LiteralExpression

  @pushScope = (scope) ->
    @stack.push(@scope)
    @scope = scope

  @popScope = ->
    @scope = @stack.pop()
}

global = statements { @globalScope.toMGLGlobalScope() }

identifier = a:[a-z]b:[a-z0-9-]* { a + b.join("") }

whitespaceWeak = " " / "\t" { null }
whitespaceStrong = "\n" / "\r" { null }
whitespace = whitespaceStrong / whitespaceWeak { null }

statementSeperator = whitespaceWeak* (";" / whitespaceStrong) whitespace* { null }
argumentSeperatorWeak = (((whitespaceWeak)* "," (whitespaceWeak)*) / (whitespaceWeak)+) { null }
argumentSeperatorStrong = ((whitespace* "," whitespace*) / whitespace+) { null }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                  Scopes                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

scope =
  layerScope /
  classScope /
  propertyMacroDefinitionScope

layerScope =
  ("#" name:identifier { @pushScope(@scope.addLayerScope(name)) }) scopeBody

classScope =
  ("." name:identifier { @pushScope(@scope.addClassScope(name)) }) scopeBody

propertyMacroDefinitionScope =
  (name:identifier args:propertyMacroDefinitionScopeArguments whitespace* "=" whitespace* { @pushScope(@scope.addPropertyMacro(name, args)) }) scopeBody

propertyMacroDefinitionScopeArguments =
  "(" whitespace* head:propertyMacroDefinitionScopeArgument tail:(argumentSeperatorWeak propertyMacroDefinitionScopeArgument)* whitespace* ")" { new @MacroArgDefinition([head].concat(tail.map (e) -> e[1]), @scope) } /
  "" { @MacroArgDefinition.ZERO }

propertyMacroDefinitionScopeArgument =
  name:identifier whitespace* "=" whitespace* expression:valueExpression { name: name, expression:expression } /
  name:identifier { name: name }

scopeBody =
  (whitespace* "{" body:statements "}" { @popScope() })

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                 Statements                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

statements = whitespace* (statement (statementSeperator statement)* statementSeperator? whitespace*)?

statement =
  filterProperty /
  metaProperty /
  valueMacroDefinition /
  scope /
  property

filterProperty =
 "$filter:" whitespace* expression:filterExpression { @scope.setFilter(expression) }

metaProperty =
  "$" name:identifier ":" whitespace* expressions:valueExpressions { @scope.addMetaProperty(name, expressions) }

property =
  name:identifier ":" whitespace* expressions:valueExpressions { @scope.addProperty(name, expressions) } /
  name:identifier { @scope.addProperty(name, []) }

valueMacroDefinition =
  name:identifier args:valueMacroDefinitionArguments whitespace* "=" whitespace* expressions:valueExpressions { @scope.addValueMacro(name, args, expressions) }

valueMacroDefinitionArguments =
  "(" whitespace* head:valueMacroDefinitionArgument tail:(argumentSeperatorStrong valueMacroDefinitionArgument)* whitespace* ")" { new @MacroArgDefinition([head].concat(@_.pluck(tail, 1)), @scope) } /
  "" { @MacroArgDefinition.ZERO }

valueMacroDefinitionArgument =
  name:identifier whitespace* "=" whitespace* expression:valueExpression { name: name, expression: expression } /
  name:identifier { name: name }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                 Expression                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////
//           Filter Expression             //
/////////////////////////////////////////////

filterExpression =
  notOperatorExpression /
  booleanLogicExpression /
  leafExpression

booleanLogicExpression =
  whitespace* left:leafExpression whitespace* operator:("||" / "&&") whitespace* right:filterExpression { new @BooleanLogicExpression(operator, [left, right]) }

notOperatorExpression =
  "!" whitespace* expression:filterExpression { new @NotOperatorExpression(expression) }

// Leaf Filter Expressions

leafExpression =
  groupExpression /
  setOperatorExpression /
  comparisonOperatorExpression /
  typeCheckOperatorExpression

groupExpression =
  whitespace* "(" expression:filterExpression ")" { expression }

typeCheckOperatorExpression =
  whitespace* "is" whitespace* type:valueExpression { new @TypeCheckOperatorExpression(type) } /

comparisonOperatorExpression =
  whitespace* left:valueExpression whitespace* operator:("==" / ">=" / "<=" / "<" / ">" / "!=") whitespace* right:valueExpression { new @ComparisonOperatorExpression(left, operator, right) }

setOperatorExpression =
  whitespace* left:valueExpression whitespace* operator:("in" / "!in") whitespace* right:valueExpression { new @SetOperatorExpression(left, operator, right) }

/////////////////////////////////////////////
//           Value Expression              //
/////////////////////////////////////////////

valueExpressionsWeak =
  head:valueExpression tail:(argumentSeperatorWeak valueExpression)* { [head].concat(tail.map (e) -> e[1]) }

valueExpressionsStrong =
  head:valueExpression tail:(argumentSeperatorStrong valueExpression)* { [head].concat(tail.map (e) -> e[1]) }

valueExpressions =
  valueExpressionsWeak /
  "(" whitespace* expressions:valueExpressionsStrong whitespace* ")" { expressions }

valueExpression =
  literalValueExpression /
  valueMacroReferenceValueExpression /
  stringExpression /
  arrayExpression

valueMacroReferenceValueExpression =
  name:identifier expressions:valueMacroReferenceValueExpressionArguments { new @ValueMacroReferenceExpression(name, expressions) }

valueMacroReferenceValueExpressionArguments =
  "(" whitespace* head:valueMacroReferenceValueExpressionArgument tail:(argumentSeperatorStrong valueMacroReferenceValueExpressionArgument)* whitespace* ")" { [head].concat(@_.pluck(tail, 1) ) } /
  "" { [] }

valueMacroReferenceValueExpressionArgument =
  name:(identifier / integer) whitespace* ":" whitespace* expression:valueExpression { name: name, expression: expression } /
  expression:valueExpression { { expression: expression } }

stringExpression =
  "\"" body:[^\"]* "\"" { new @StringExpression(body.join("")) }

literalValueExpression =
  value:value { @literalExpression value }

arrayExpression =
  "[" whitespace* expressions:valueExpressionsStrong whitespace* "]" { new @ArrayExpression(expressions) }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                  Value                                     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

value =
  booleanValue /
  numberValue /
  attributeReferenceValue /
  colorValue

booleanValue =
  "true" { true } /
  "false" { false }

numberValue =
  before:integer? "." after:([0-9]+) { (before + parseFloat("." + after.join(""))) } /
  number:integer { number }

integer =
  head:[1-9] tail:[0-9]* { parseInt(head + tail.join("")) } /
  "0" { 0 }

attributeReferenceValue =
  "@" name:identifier { new @AttributeReferenceValue(name) }

colorValue =
  "#" color:[0-9a-f]+ { @ColorValue.hex(color.join("")) }

