{
  _ = require './utilities'

  @GlobalScope = require('./scopes/GlobalScope')

  @ColorValue = require('./values/ColorValue')

  @LiteralExpression = require('./expressions/LiteralExpression')
  @ValueMacroReferenceExpression = require('./expressions/ValueMacroReferenceExpression')
  @AttributeReferenceExpression = require('./expressions/AttributeReferenceExpression')

  @globalScope = @scope = new @GlobalScope()
  @stack = []

  {@literal} = @LiteralExpression

  @pushScope = (scope) ->
    @stack.push(@scope)
    @scope = scope
  @popScope = ->
    @scope = @stack.pop()
}

global = statements { @globalScope.evaluate() }

identifier = a:[a-z]b:[a-z0-9-]* { a + b.join("") }

w =  (("\n" / "\r" / "\t" / " ")* / !.) { null }
s = ("\n" / "\r" / ";" / !.) w { null }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                            Scopes and Statements                           //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

statements = w (statement w)*

statement =
  valueMacroDefinition /
  rule /
  layerScope /
  classScope /
  ruleMacroDefinition

layerScope = ("#" name:identifier { @pushScope(@scope.addLayerScope(name)) }) scope
classScope = ("." name:identifier { @pushScope(@scope.addClassScope(name)) }) scope
scope = (w "{" w body:statements w "}" w { @popScope() })

rule =
  name:identifier w ":" w expressions:expressions s { @scope.addRule(name, expressions) }

valueMacroDefinition =
  name:identifier args:valueMacroDefinitionArguments w "=" w body:expression s
  { @scope.addValueMacro(name, args, body) }

valueMacroDefinitionArguments =
  "(" head:identifier tail:(w identifier)* ")" { [head].concat(tail.map (e) -> e[1] ) } /
  "" { return [] }

ruleMacroDefinition =
  (name:identifier args:ruleMacroDefinitionArguments w "=" w { @pushScope(@scope.addRuleMacro(name, args)) }) scope

ruleMacroDefinitionArguments =
  "(" head:identifier tail:(w identifier)* ")" { [head].concat(tail.map (e) -> e[1] ) } /
  "" { return [] }

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                             Value Expression                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

expressions =
  head:expression tail:(" "+ expression)* { [head].concat(tail.map (e) -> e[1]) }

expression =
  numberExpression /
  booleanExpression /
  valueMacroReferenceExpression /
  attributeReferenceExpression /
  colorExpression

booleanExpression =
  "true" { @literal true } / "false" { @literal false }

numberExpression =
  before:integerExpression? "." after:([0-9]+) { @literal before + parseFloat("." + after.join("")) } /
  integerExpression

integerExpression =
  head:[1-9] tail:[0-9]* { @literal parseInt(head + tail.join("")) } /
  "0" { @literal 0 }

valueMacroReferenceExpression =
  name:identifier args:valueMacroReferenceExpressionArguments { new @ValueMacroReferenceExpression(name, args) }

valueMacroReferenceExpressionArguments =
  "(" head:expression tail:(w expression)* ")" { [head].concat(tail.map (e) -> e[1] ) } /
  "" { [] }

attributeReferenceExpression =
  "@" name:identifier { new @AttributeReferenceExpression(name) }

colorExpression =
  "#" color:[0-9a-f]+ { @literal @ColorValue.hex(color.join("")) }
